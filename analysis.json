{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "The `<outh2-authorization>` performs an OAuth2 requests to get a token for given settings.\n\nThere are 4 basic token requests flows:\n- Authorization Code for apps running on a web server (`authorization_code` type)\n- Implicit for browser-based or mobile apps (`implicit` type)\n- Password for logging in with a username and password (`password` type)\n- Client credentials for application access (`client_credentials` type)\n\nThis element uses them all.\n\nMain function is the `authorize()` function that can be also used via event system.\nThis function accepts different set of parameters depending on request type. However it will\nnot perform a validation on the settings. It will try to perform the request for given set of\nparameters. If it fails, than it fail on the server side.\n\n### Example\n\n```\n<outh2-authorization></outh2-authorization>\n```\n```\nvar settings = {\n  type: 'implicit',\n  clientId: 'CLIENT ID',\n  redirectUrl: 'https://example.com/auth-popup.html',\n  authorizationUrl: 'https://auth.example.com/token'\n  scopes: ['email'],\n  state: 'Optional string'\n};\nvar factory = document.querySelector('outh2-authorization');\nfactory.authorize(settings)\n\n// or event based\nvar event = new CustomEvent('oauth2-token-requested', { 'detail': settings, bubbles: true });\ndocument.dispatchEvent(event);\n```\n\nThere is one difference for from using event based approach. When the token has been received\nthis will set `tokenValue` property on the target of the event.\nThe event will be canceled one it reach this element so other elements will not double the action.\n\nAn element or app that requesting the token should observe the `oauth2-token-response` and\n`oauth2-error` events to get back the response.\n\n## Popup in authorization flow\n\nThis element conatin a `oauth-popup.html` that can be used to exchange token / code data with\nhosting page. Other page can be used as well. But in must `window.postMessage` back to the\n`window.opener`. The structure of the message if the parsed query or has string to the map\nof parameters. Furthermore it must camel case the parameters. Example script is source code\nof the `oauth-popup.html` page.\nPopup should be served over the SSL.\n\n## The state parameter and security\n\nThis element is intened to be used in debug applications where confidentialy is already\ncompromised because users may be asked to provide client secret parameter (depending on the flow).\n*It should not be used in client applications** that don't serve debugging purposes.\nClient secret should never be used on the client side.\n\nTo have at least minimum of protection (in already compromised environment) this library generates\na `state` parameter as a series of alphanumeric characters and append them to the request.\nIt is expected to return the same string in the response (as defined in rfc6749). Though this\nparameter is optional, it will reject the response if the `state` parameter is not the same as the\none generated before the request.\n\nThe state parameter is generated automatically by the element if non provided in\nsettings. It is a good idea to use this property to check if the event response\n(either token or error) are comming from your request for token. The app can\nsupport different oauth clients so you can check later with the token response if\nthis is a response for the same client.\n\n## Non-interactive authorization (experimental)\n\nFor `implicit` and `code` token requests you can set `interactive` property\nof the settings object to `false` to request the token in the background without\ndisplaying any UI related to authorization to the user.\nIt can be used to request an access token after the user authorized the application.\nServer should return the token which will be passed back to the application.\n\nWhen using `interactive = false` mode then the response event is always\n`oauth2-token-response`, even when there was authorization error or user never\nauthorized the application. In this case the response object will not carry\n`accessToken` property and always have `interactive` set to `false` and `code`\nto determine cause of unsuccesful request.\n\n### Example\n\n```\nvar settings = {\n  interactive: false,\n  type: 'implicit',\n  clientId: 'CLIENT ID',\n  redirectUrl: 'https://example.com/auth-popup.html',\n  authorizationUrl: 'https://auth.example.com/token'\n  state: '1234'\n};\nvar event = new CustomEvent('oauth2-token-requested', { 'detail': settings, bubbles: true });\ndocument.dispatchEvent(event);\n\ndocument.body.addEventListener('oauth2-token-response', (e) => {\n  let info = e.detail;\n  if (info.state !== '1234') {\n    return;\n  }\n  if (info.interactive === false && info.code) {\n    // unsuccesful request\n    return;\n  }\n  let token = info.accessToken;\n});\n```\n\n## Demo\nSee `auth-methods` > `auth-method-oauth2` element for the demo.",
      "summary": "",
      "path": "oauth2-authorization.html",
      "properties": [
        {
          "name": "tokenInfo",
          "type": "Object",
          "description": "A full data returned by the authorization endpoint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 2
            },
            "end": {
              "line": 175,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 180,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 2
            },
            "end": {
              "line": 185,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "clear",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_cleanupPopup",
          "description": "Clean up popup reference and closes the window if not yet closed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_tokenRequestedHandler",
          "description": "Handler for the `oauth2-token-requested` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "authorize",
          "description": "Authorize the user using provided settings.\nSee `auth-methods/auth-method-oauth2` element for more information about settings.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 243,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings"
            }
          ]
        },
        {
          "name": "_authorize",
          "description": "Authorizes the user in the OAuth authorization endpoint.\nBy default it authorizes the user using a popup that displays\nauthorization screen. When `interactive` property is set to `false`\non the `settings` object then it will quietly create an iframe\nand try to receive the token.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 262,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "authUrl",
              "type": "String",
              "description": "Complete authorization url"
            },
            {
              "name": "settings",
              "type": "Object",
              "description": "Passed user settings"
            }
          ]
        },
        {
          "name": "_authorizePopup",
          "description": "Creates and opens auth popup.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ]
        },
        {
          "name": "_authorizeTokenNonInteractive",
          "description": "Tries to Authorize the user in a non interactive way.\nThis method always result in a success response. When there's an error or\nuser is not logged in then the response won't contain auth token info.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 2
            },
            "end": {
              "line": 304,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ]
        },
        {
          "name": "_cleanupFrame",
          "description": "Removes the frame and any event listeners attached to it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 2
            },
            "end": {
              "line": 320,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_frameLoadErrorHandler",
          "description": "Handler for `error` event dispatched by oauth iframe.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 2
            },
            "end": {
              "line": 334,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_frameLoadHandler",
          "description": "Handler for iframe `load` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 2
            },
            "end": {
              "line": 349,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_observePopupState",
          "description": "Observer if the popup has been closed befor the data has been received.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 361,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_constructPopupUrl",
          "description": "Browser or server flow: open the initial popup.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 2
            },
            "end": {
              "line": 402,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Settings passed to the authorize function."
            },
            {
              "name": "type",
              "type": "String",
              "description": "`token` or `code`"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Full URL for the endpoint."
          }
        },
        {
          "name": "_applyCustomSettingsQuery",
          "description": "Applies custom properties defined in the OAuth settings object to the URL.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 423,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "Generated URL for an endpoint."
            },
            {
              "name": "data",
              "type": "?Object",
              "description": "`customData.[type]` property from the settings object.\nThe type is either `auth` or `token`."
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_computeScope",
          "description": "Computes `scope` URL parameter from scopes array.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 436,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scopes",
              "type": "Array.<String>",
              "description": "List of scopes to use with the request."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Computed scope value."
          }
        },
        {
          "name": "_popupMessageHandler",
          "description": "Listen for a message from the popup.\n\nToken will be extracted and `oauth2-token-response` will be fired. Also, if the initial\nrequest came from an event, a `tokenValue` property fill be set on the event target.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 2
            },
            "end": {
              "line": 485,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "randomString",
          "description": "http://stackoverflow.com/a/10727155/1127848",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "len"
            }
          ]
        },
        {
          "name": "_beforePopupUnloadHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 492,
              "column": 2
            },
            "end": {
              "line": 506,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_exchangeCode",
          "description": "Exchange code for token.\nOne note here. This element is intened to use with applications that test endpoints.\nIt asks user to provide `client_secret` parameter and it is not a security concern to him.\nHowever, this method **can't be used in regular web applications** because it is a\nsecurity risk and whole OAuth token exchange can be compromised. Secrets should never be\npresent on client side.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 2
            },
            "end": {
              "line": 522,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "code",
              "type": "String",
              "description": "Returned code from the authorization endpoint."
            }
          ]
        },
        {
          "name": "_getCodeEchangeBody",
          "description": "Returns a body value for the code exchange request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 530,
              "column": 2
            },
            "end": {
              "line": 543,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Initial settings object."
            },
            {
              "name": "code",
              "type": "String",
              "description": "Authorization code value returned by the authorization\nserver."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Request body."
          }
        },
        {
          "name": "_applyCustomSettingsBody",
          "description": "Applies custom body properties from the settings to the body value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 2
            },
            "end": {
              "line": 564,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "body",
              "type": "String",
              "description": "Already computed body for OAuth request. Custom\nproperties are appended at the end of OAuth string."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "Value of settings' `customData` property"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Request body"
          }
        },
        {
          "name": "_tokenCodeRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 566,
              "column": 2
            },
            "end": {
              "line": 608,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            },
            {
              "name": "body"
            }
          ]
        },
        {
          "name": "_handleTokenCodeResponse",
          "description": "Decode token information from the response body.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 611,
              "column": 2
            },
            "end": {
              "line": 661,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "contentType"
            }
          ]
        },
        {
          "name": "_handleTokenCodeError",
          "description": "Handler fore an error that happened during code exchange.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 666,
              "column": 2
            },
            "end": {
              "line": 674,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Error"
            }
          ]
        },
        {
          "name": "_camel",
          "description": "Replaces `-` or `_` with camel case.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 681,
              "column": 2
            },
            "end": {
              "line": 693,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "The string to process"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Camel cased string or `undefined` if not\ntransformed."
          }
        },
        {
          "name": "_authorizePassword",
          "description": "Requests a token for `password` request type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 699,
              "column": 2
            },
            "end": {
              "line": 751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Settings passed to the `authorize()` function."
            }
          ]
        },
        {
          "name": "_getPasswordBody",
          "description": "Generates a payload message for password authorization.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 759,
              "column": 2
            },
            "end": {
              "line": 774,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Settings object passed to the `authorize()`\nfunction"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Message body as defined in OAuth2 spec."
          }
        },
        {
          "name": "_authorizeClientCredential",
          "description": "Requests a token for `client_credentials` request type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 780,
              "column": 2
            },
            "end": {
              "line": 832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Settings passed to the `authorize()` function."
            }
          ]
        },
        {
          "name": "_getClientCredentialBody",
          "description": "Generates a payload message for client credentials.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 840,
              "column": 2
            },
            "end": {
              "line": 856,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Settings object passed to the `authorize()`\nfunction"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Message body as defined in OAuth2 spec."
          }
        },
        {
          "name": "_applyCustomSettingsHeaders",
          "description": "Applies custom headers from the settings object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 863,
              "column": 2
            },
            "end": {
              "line": 874,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xhr",
              "type": "XMLHttpRequest",
              "description": "Instance of the request object."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "Value of settings' `customData` property"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 135,
          "column": 8
        },
        "end": {
          "line": 875,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "token-info",
          "description": "A full data returned by the authorization endpoint.",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oauth2-error",
          "description": "oauth2-error",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oauth2-token-response",
          "description": "oauth2-token-response",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oauth2-authorization"
    },
    {
      "description": "An element to perform OAuth1 authorization and to sign auth requests.\n\nNote that the OAuth1 authorization wasn't designed for browser. Most existing\nOAuth1 implementation deisallow browsers to perform the authorization by\nnot allowing POST requests to authorization server. Therefore receiving token\nmay not be possible without using browser extensions to alter HTTP request to\nenable CORS.\nIf the server disallow obtaining authorization token and secret from clients\nthen your application has to listen for `oauth1-token-requested` custom event\nand perform authorization on the server side.\n\nWhen auth token and secret is available and the user is to perform a HTTP request,\nthe request panel sends `before-request` cutom event. This element handles the event\nand apllies authorization header with generated signature to the request.\n\n## OAuth 1 configuration object\n\nBoth authorization or request signing requires detailed configuration object.\nThis is handled by the request panel. It sets OAuth1 configuration in the `request.auth`\nproperty.\n\n| Property | Type | Description |\n| ----------------|-------------|---------- |\n| `signatureMethod` | `String` | One of `PLAINTEXT`, `HMAC-SHA1`, `RSA-SHA1` |\n| `requestTokenUrl` | `String` | Token request URI. Optional for before request. Required for authorization |\n| `accessTokenUrl` | `String` | Access token request URI. Optional for before request. Required for authorization |\n| `authorizationUrl` | `String` | User dialog URL. |\n| `consumerKey` | `String` | Consumer key to be used to generate the signature. Optional for before request. |\n| `consumerSecret` | `String` | Consumer secret to be used to generate the signature. Optional for before request. |\n| `redirectUrl` | `String` | Redirect URI for the authorization. Optional for before request. |\n| `authParamsLocation` | `String` | Optional. Location of the authorization parameters. Default to `authorization` meaning it creates an authorization header. Any other value means query parameters |\n| `authTokenMethod` | `String` | Token request HTTP method. Default to `POST`. Optional for before request. |\n| `version` | `String` | Oauth1 protocol version. Default to `1.0` |\n| `nonceSize` | `Number` | Size of the nonce word to generate. Default to 32. Unused if `nonce` is set. |\n| `nonce` | `String` | Nonce to be used to generate signature. |\n| `timestamp` | `Number` | Request timestamp. If not set it sets current timestamp |\n| `customHeaders` | `Object` | Map of custom headers to set with authorization request |\n| `type` | `String` | Must be set to `oauth1` or during before-request this object will be ignored. |\n| `token` | `String` | Required for signing requests. Received OAuth token |\n| `tokenSecret` | `String` | Required for signing requests. Received OAuth token secret |\n\n## Error codes\n\n-  `params-error` Oauth1 parameters are invalid\n-  `oauth1-error` OAuth popup is blocked.\n-  `token-request-error` HTTP request to the authorization server failed\n-  `no-response` No response recorded.\n\n## Acknowledgements\n\n- This element uses [jsrsasign](https://github.com/kjur/jsrsasign) library distributed\nunder MIT licence.\n- This element uses [crypto-js](https://code.google.com/archive/p/crypto-js/) library\ndistributed under BSD license.\n\njscs:disable requireDotNotation",
      "summary": "",
      "path": "oauth1-authorization.html",
      "properties": [
        {
          "name": "tokenInfo",
          "type": "Object",
          "description": "A full data returned by the authorization endpoint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "proxy",
          "type": "string",
          "description": "If set, requests made by this element to authorization endpoint will be\nprefixed with the proxy value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lastIssuedToken",
          "type": "Object",
          "description": "Latest valid token exchanged with the authorization endpoint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 104,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "requestTokenUrl",
          "type": "string",
          "description": "OAuth 1 token authorization endpoint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "accessTokenUrl",
          "type": "string",
          "description": "Oauth 1 token exchange endpoint",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "consumerKey",
          "type": "string",
          "description": "Oauth 1 consumer key to use with auth request",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "consumerSecret",
          "type": "string",
          "description": "Oauth 1 consumer secret to be used to generate the signature.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "signatureMethod",
          "type": "string",
          "description": "A signature generation method.\nOnce of: `PLAINTEXT`, `HMAC-SHA1` or `RSA-SHA1`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HMAC-SHA1\""
        },
        {
          "name": "authParamsLocation",
          "type": "string",
          "description": "Location of the OAuth authorization parameters.\nIt can be either `authorization` meaning as a header and\n`querystring` to put OAuth parameters to the URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"authorization\""
        },
        {
          "name": "_caseMap",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_camelRegex",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "urlEncodedType",
          "type": "string",
          "description": "Returns `application/x-www-form-urlencoded` content type value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"application/x-www-form-urlencoded\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 175,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleRequest",
          "description": "The `before-request` handler. Creates an authorization header if needed.\nNormally `before-request` expects to set a promise on the `detail.promises`\nobject. But because this taks is sync it skips the promise and manipulate\nrequest object directly.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 195,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_applyBeforeRequestSignature",
          "description": "Applies OAuth1 authorization header with generated signature for this\nrequest.\n\nThis method expects the `auth` object to be set on the request. The object\nis full configuration for the OAuth1 authorization as described in\n`auth-methods/oauth1.html` element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 2
            },
            "end": {
              "line": 245,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            },
            {
              "name": "auth"
            }
          ]
        },
        {
          "name": "_tokenRequestedHandler",
          "description": "A handler for the `oauth1-token-requested` event.\nPerforms OAuth1 authorization for given settings.\n\nThe detail object of the event contains OAuth1 configuration as described\nin `auth-methods/oauth1.html`element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 2
            },
            "end": {
              "line": 258,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "authorize",
          "description": "Performs a request to authorization server.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "settings",
              "type": "Object",
              "description": "Oauth1 configuration. See description for more\ndetails or `auth-methods/oauth1.html` element that collectes configuration\nfrom the user."
            }
          ]
        },
        {
          "name": "_prepareOauth",
          "description": "Sets a configuration properties on this element from passed settings.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 2
            },
            "end": {
              "line": 344,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "params",
              "type": "Object",
              "description": "See description for more\ndetails or `auth-methods/oauth1.html` element that collectes configuration\nfrom the user."
            }
          ]
        },
        {
          "name": "_defaultHeaders",
          "description": "List of default headers to send with auth request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 2
            },
            "end": {
              "line": 356,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object",
            "desc": "Map of default headers."
          }
        },
        {
          "name": "getTimestamp",
          "description": "Returns current timestamp.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 2
            },
            "end": {
              "line": 364,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Number",
            "desc": "Current timestamp"
          }
        },
        {
          "name": "encodeData",
          "description": "URL encodes the string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 2
            },
            "end": {
              "line": 377,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toEncode",
              "type": "String",
              "description": "A string to encode."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Encoded string"
          }
        },
        {
          "name": "_finishEncodeParams",
          "description": "Normalizes url encoded values as defined in the OAuth 1 spec.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 2
            },
            "end": {
              "line": 390,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "URI encoded params."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Normalized params."
          }
        },
        {
          "name": "decodeData",
          "description": "URL decodes data.\nAlso replaces `+` with ` ` (space).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 399,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toDecode",
              "type": "String",
              "description": "String to decode."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Decoded string"
          }
        },
        {
          "name": "getSignature",
          "description": "Computes signature for the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 2
            },
            "end": {
              "line": 443,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "signatureMethod",
              "type": "String",
              "description": "Method to use to generate the signature.\nSupported are: `PLAINTEXT`, `HMAC-SHA1`, `RSA-SHA1`. It throws an error if\nvalue of this property is other than listed here."
            },
            {
              "name": "requestMethod",
              "type": "String",
              "description": "Request HTTP method."
            },
            {
              "name": "url",
              "type": "String",
              "description": "Request full URL."
            },
            {
              "name": "oauthParameters",
              "type": "Object",
              "description": "Map of oauth parameters."
            },
            {
              "name": "tokenSecret",
              "type": "?String",
              "description": "Optional, token secret."
            },
            {
              "name": "body",
              "type": "?String",
              "description": "Body used with the request. Note: this parameter\ncan only be set if the request's content-type header equals\n`application/x-www-form-urlencoded`."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Generated OAuth1 signature for given `signatureMethod`"
          }
        },
        {
          "name": "_normalizeUrl",
          "description": "Normalizes URL to base string URI as described in\nhttps://tools.ietf.org/html/rfc5849#section-3.4.1.2",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "Request full URL."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Base String URI"
          }
        },
        {
          "name": "_isParameterNameAnOAuthParameter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 2
            },
            "end": {
              "line": 472,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parameter",
              "type": "String",
              "description": "Parameter name (key)."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the `parameter` is an OAuth 1 parameter."
          }
        },
        {
          "name": "_buildAuthorizationHeaders",
          "description": "Creates an Authorization header value to trasmit OAuth params in headers\nas described in https://tools.ietf.org/html/rfc5849#section-3.5.1",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 481,
              "column": 2
            },
            "end": {
              "line": 492,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "orderedParameters",
              "type": "Array",
              "description": "Oauth parameters that are already\nordered."
            }
          ],
          "return": {
            "type": "String",
            "desc": "The Authorization header value"
          }
        },
        {
          "name": "_buildFormDataParameters",
          "description": "Creates a body for www-urlencoded content type to transmit OAuth params\nin request body as described in\nhttps://tools.ietf.org/html/rfc5849#section-3.5.2",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 511,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "orderedParameters",
              "type": "Array",
              "description": "Oauth parameters that are already\nordered."
            }
          ],
          "return": {
            "type": "String",
            "desc": "The body to send"
          }
        },
        {
          "name": "_buildAuthorizationQueryStirng",
          "description": "Adds query paramteres with OAuth 1 parameters to the URL\nas described in https://tools.ietf.org/html/rfc5849#section-3.5.3",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 520,
              "column": 2
            },
            "end": {
              "line": 533,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            },
            {
              "name": "orderedParameters",
              "type": "Array",
              "description": "Oauth parameters that are already\nordered."
            }
          ],
          "return": {
            "type": "String",
            "desc": "URL to use with the request"
          }
        },
        {
          "name": "_makeArrayOfArgumentsHash",
          "description": "of argument/value pairs.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 536,
              "column": 2
            },
            "end": {
              "line": 549,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "argumentsHash"
            }
          ]
        },
        {
          "name": "_sortRequestParams",
          "description": "Sorts the encoded key value pairs by encoded name, then encoded value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 2
            },
            "end": {
              "line": 562,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "argumentPairs"
            }
          ]
        },
        {
          "name": "_sortParamsFunction",
          "description": "Sort function to sort parameters as described in\nhttps://tools.ietf.org/html/rfc5849#section-3.4.1.3.2",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_normaliseRequestParams",
          "description": "Normalizes request parameters as described in\nhttps://tools.ietf.org/html/rfc5849#section-3.4.1.3.2",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 582,
              "column": 2
            },
            "end": {
              "line": 601,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "Array",
              "description": "List of parameters to normalize. It must contain\na list of array items where first element of the array is parameter name\nand second is parameter value."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Normalized parameters to string."
          }
        },
        {
          "name": "_listQueryParameters",
          "description": "Computes array of parameters from the request URL.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 609,
              "column": 2
            },
            "end": {
              "line": 617,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "Full request URL"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of parameters where each item is an array with\nfirst element as a name of the parameter and second element as a value."
          }
        },
        {
          "name": "_formUrlEncodedToParams",
          "description": "Computes array of parameters from the entity body.\nThe body must be `application/x-www-form-urlencoded`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 2
            },
            "end": {
              "line": 643,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "body",
              "type": "String",
              "description": "Entity body of `application/x-www-form-urlencoded`\nrequest"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of parameters where each item is an array with\nfirst element as a name of the parameter and second element as a value.\nKeys and values are percent decoded. Additionally each `+` is replaced\nwith space character."
          }
        },
        {
          "name": "createSignatureBase",
          "description": "Creates a signature base as defined in\nhttps://tools.ietf.org/html/rfc5849#section-3.4.1",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 656,
              "column": 2
            },
            "end": {
              "line": 669,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "String",
              "description": "HTTP method used with the request"
            },
            {
              "name": "url",
              "type": "String",
              "description": "Full URL of the request"
            },
            {
              "name": "oauthParams",
              "type": "Object",
              "description": "Key - value pairs of OAuth parameters"
            },
            {
              "name": "body",
              "type": "?String",
              "description": "Body used with the request. Note: this parameter\ncan only be set if the request's content-type header equals\n`application/x-www-form-urlencoded`."
            }
          ],
          "return": {
            "type": "String",
            "desc": "A base string to be used to generate signature."
          }
        },
        {
          "name": "createSignatureKey",
          "description": "Creates a signature key to compute the signature as described in\nhttps://tools.ietf.org/html/rfc5849#section-3.4.2",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 678,
              "column": 2
            },
            "end": {
              "line": 686,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "clientSecret",
              "type": "String",
              "description": "Client secret (consumer secret)."
            },
            {
              "name": "tokenSecret",
              "type": "?String",
              "description": "Optional, token secret"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A key to be used to generate the signature."
          }
        },
        {
          "name": "hex2b64",
          "description": "Found at http://jsfiddle.net/ARTsinn/6XaUL/",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 693,
              "column": 2
            },
            "end": {
              "line": 714,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h",
              "type": "String",
              "description": "Hexadecimal input"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Result of transforming value to string."
          }
        },
        {
          "name": "_createSignaturePlainText",
          "description": "Creates a signature for the PLAINTEXT method.\n\nIn this case the signature is the key.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 724,
              "column": 2
            },
            "end": {
              "line": 726,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "Computed signature key."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Computed OAuth1 signature."
          }
        },
        {
          "name": "_createSignatureRsaSha1",
          "description": "Creates a signature for the RSA-SHA1 method.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 734,
              "column": 2
            },
            "end": {
              "line": 740,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseText",
              "type": "String",
              "description": "Computed signature base text."
            },
            {
              "name": "privateKey",
              "type": "String",
              "description": "Client private key."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Computed OAuth1 signature."
          }
        },
        {
          "name": "_createSignatureHamacSha1",
          "description": "Creates a signature for the HMAC-SHA1 method.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 748,
              "column": 2
            },
            "end": {
              "line": 752,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseText"
            },
            {
              "name": "key",
              "type": "String",
              "description": "Computed signature key."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Computed OAuth1 signature."
          }
        },
        {
          "name": "_getNonce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 768,
              "column": 2
            },
            "end": {
              "line": 779,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nonceSize"
            }
          ]
        },
        {
          "name": "_prepareParameters",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 781,
              "column": 2
            },
            "end": {
              "line": 810,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "token"
            },
            {
              "name": "tokenSecret"
            },
            {
              "name": "method"
            },
            {
              "name": "url"
            },
            {
              "name": "extraParams"
            },
            {
              "name": "body"
            }
          ]
        },
        {
          "name": "encodeUriParams",
          "description": "Encodes parameters in the map.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 812,
              "column": 2
            },
            "end": {
              "line": 817,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "params"
            }
          ]
        },
        {
          "name": "signRequestObject",
          "description": "Creates OAuth1 signature for a `request` object.\nThe request object must contain:\n- `url` - String\n- `method` - String\n- `headers` - String\nIt also may contain the `body` property.\n\nIt alters the request object by applying OAuth1 parameters to a set\nlocation (qurey parameters, authorization header, body). This is\ncontrolled by `this.authParamsLocation` property. By default the\nparameters are applied to authorization header.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 839,
              "column": 2
            },
            "end": {
              "line": 871,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object."
            },
            {
              "name": "token",
              "type": "?String",
              "description": "OAuth token to use to generate the signature.\nIf not set, then it will use a value from `this.lastIssuedToken`."
            },
            {
              "name": "tokenSecret",
              "type": "?String",
              "description": "OAuth token secret to use to generate the\nsignature. If not set, then it will use a value from\n`this.lastIssuedToken`."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The same object with applied OAuth 1 parameters."
          }
        },
        {
          "name": "_performRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 873,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "token"
            },
            {
              "name": "tokenSecret"
            },
            {
              "name": "method"
            },
            {
              "name": "url"
            },
            {
              "name": "extraParams"
            },
            {
              "name": "body"
            },
            {
              "name": "contentType"
            }
          ]
        },
        {
          "name": "getOAuthAccessToken",
          "description": "Exchanges temporary authorization token for authorized token.\nWhen ready this function fires `oauth1-token-response`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 936,
              "column": 2
            },
            "end": {
              "line": 967,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "token"
            },
            {
              "name": "secret"
            },
            {
              "name": "verifier"
            }
          ]
        },
        {
          "name": "clearRequestVariables",
          "description": "Clears variables set for current request after signature has been\ngenerated and token obtained.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 972,
              "column": 2
            },
            "end": {
              "line": 976,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getOAuthRequestToken",
          "description": "Requests the authorization server for temporarty authorization token.\nThis token should be passed to `authorizationUri` as a `oauth_token`\nparameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 988,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extraParams",
              "type": "Object",
              "description": "List of extra parameters to include in the\nrequest."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise resolved to a map of OAuth 1 parameters:\n`oauth_token`, `oauth_token_secret`, `oauth_verifier` and\n`oauth_callback_confirmed` (for 1.0a version)."
          }
        },
        {
          "name": "request",
          "description": "Makes a HTTP request.\nBefore making the request it sends `auth-request-proxy` custom event\nwith the URL and init object in event's detail object.\nIf the event is cancelled then it will use detail's `result` value to\nreturn from this function. The `result` must be a Promise that will\nresolve to a `Response` object.\nOtherwise it will use internall `fetch` implementation.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1023,
              "column": 2
            },
            "end": {
              "line": 1035,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "An URL to call"
            },
            {
              "name": "init",
              "type": "Object",
              "description": "Init object that will be passed to a `Request`\nobject."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise that resolves to a `Response` object."
          }
        },
        {
          "name": "_fetch",
          "description": "Performs a HTTP request.\nIf `proxy` is set or `iron-meta` with a key `auth-proxy` is set then\nit will prefix the URL with the value of proxy.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1046,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": "An URL to call"
            },
            {
              "name": "init",
              "type": "Object",
              "description": "Init object that will be passed to a `Request`\nobject."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A promise that resolves to a `Response` object."
          }
        },
        {
          "name": "_listenPopup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1075,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_observePopupState",
          "description": "Observer if the popup has been closed befor the data has been received.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1078,
              "column": 2
            },
            "end": {
              "line": 1085,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_beforePopupUnloadHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1087,
              "column": 2
            },
            "end": {
              "line": 1093,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_dispatchError",
          "description": "Dispatches an error event that propagates through the DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1100,
              "column": 2
            },
            "end": {
              "line": 1110,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "message",
              "type": "String"
            },
            {
              "name": "code",
              "type": "String"
            }
          ]
        },
        {
          "name": "parseMapKeys",
          "description": "Adds camel case keys to a map of parameters.\nIt adds new keys to the object tranformed from `oauth_token`\nto `oauthToken`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1116,
              "column": 2
            },
            "end": {
              "line": 1119,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_parseParameter",
          "description": "Parses a query parameter object to produce camel case map of parameters.\nThis sets values to the `settings` object which is passed by reference.\nNo need to return value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1128,
              "column": 2
            },
            "end": {
              "line": 1140,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "param",
              "type": "String",
              "description": "Key in the `settings` object."
            },
            {
              "name": "settings",
              "type": "Object",
              "description": "Parameters."
            }
          ]
        },
        {
          "name": "_getCaseParam",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1142,
              "column": 2
            },
            "end": {
              "line": 1144,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "param"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 1179,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OAuth1Authorization",
      "attributes": [
        {
          "name": "token-info",
          "description": "A full data returned by the authorization endpoint.",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "proxy",
          "description": "If set, requests made by this element to authorization endpoint will be\nprefixed with the proxy value.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 19
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "last-issued-token",
          "description": "Latest valid token exchanged with the authorization endpoint.",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 104,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "request-token-url",
          "description": "OAuth 1 token authorization endpoint.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "access-token-url",
          "description": "Oauth 1 token exchange endpoint",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "consumer-key",
          "description": "Oauth 1 consumer key to use with auth request",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "consumer-secret",
          "description": "Oauth 1 consumer secret to be used to generate the signature.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "signature-method",
          "description": "A signature generation method.\nOnce of: `PLAINTEXT`, `HMAC-SHA1` or `RSA-SHA1`",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "auth-params-location",
          "description": "Location of the OAuth authorization parameters.\nIt can be either `authorization` meaning as a header and\n`querystring` to put OAuth parameters to the URL.",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "url-encoded-type",
          "description": "Returns `application/x-www-form-urlencoded` content type value.",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "auth-request-proxy",
          "description": "auth-request-proxy",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oauth1-error",
          "description": "oauth1-error",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oauth1-token-response",
          "description": "oauth1-token-response",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-issued-token-changed",
          "description": "Fired when the `lastIssuedToken` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oauth1-authorization"
    }
  ]
}
