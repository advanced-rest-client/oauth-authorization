/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/OAuth2Authorization.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {EventsTargetMixin} from '@advanced-rest-client/events-target-mixin/events-target-mixin.js';

export {OAuth2Authorization};

/**
 * The `<outh2-authorization>` performs an OAuth2 requests to get a token for given settings.
 */
declare class OAuth2Authorization extends
  EventsTargetMixin(
  Object) {
  readonly tokenInfo: object|null;
  ontokenerror: Function|null;
  ontokenresponse: Function|null;
  _attachListeners(node: any): void;
  _detachListeners(node: any): void;

  /**
   * Clears the state of the element.
   */
  clear(): void;

  /**
   * Clean up popup reference and closes the window if not yet closed.
   */
  _cleanupPopup(): void;

  /**
   * Handler for the `oauth2-token-requested` custom event.
   */
  _tokenRequestedHandler(e: CustomEvent|null): void;

  /**
   * Authorize the user using provided settings.
   *
   * @param settings Map of authorization settings.
   * - type {String} Authorization grant type. Can be `implicit`,
   * `authorization_code`, `client_credentials`, `password` or custom value
   * as OAuth 2.0 allows extensions to grant type.
   *
   * NOTE:
   * For authorization_code and any other grant type that may receive a code
   * and exchange it for an access token, the settings object may have a property
   * "overrideExchangeCodeFlow" with a boolean value (true/false).
   *
   * The "overrideExchangeCodeFlow" property is a flag indicating that the developer wants to handle
   * exchanging the code for the token instead of having the module do it.
   *
   * If "overrideExchangeCodeFlow" is set to true for the authorization_code grant type,
   * we dispatch an "oauth2-code-response" event with the auth code.
   *
   * The user of this module should listen for this event and exchange the token for an access token on their end.
   *
   * This allows client-side apps to exchange the auth code with their backend/server for an access token
   * since CORS isn't enabled for the /token endpoint.
   */
  authorize(settings: {[key: String|null]: String|null}): void;

  /**
   * Checks if basic configuration of the OAuth 2 request is valid an can proceed
   * with authentication.
   *
   * @param settings authorization settings
   */
  _sanityCheck(settings: object|null): void;

  /**
   * Checks if the URL has valid scheme for OAuth flow.
   *
   * @param url The url value to test
   */
  _checkUrl(url: String|null): void;

  /**
   * Authorizes the user in the OAuth authorization endpoint.
   * By default it authorizes the user using a popup that displays
   * authorization screen. When `interactive` property is set to `false`
   * on the `settings` object then it will quietly create an iframe
   * and try to receive the token.
   *
   * @param authUrl Complete authorization url
   * @param settings Passed user settings
   */
  _authorize(authUrl: String|null, settings: object|null): void;

  /**
   * Creates and opens auth popup.
   *
   * @param url Complete authorization url
   */
  _authorizePopup(url: String|null): void;

  /**
   * Tries to Authorize the user in a non interactive way.
   * This method always result in a success response. When there's an error or
   * user is not logged in then the response won't contain auth token info.
   *
   * @param url Complete authorization url
   */
  _authorizeTokenNonInteractive(url: String|null): void;

  /**
   * Removes the frame and any event listeners attached to it.
   */
  _cleanupFrame(): void;

  /**
   * Handler for `error` event dispatched by oauth iframe.
   */
  _frameLoadErrorHandler(): void;

  /**
   * Handler for iframe `load` event.
   */
  _frameLoadHandler(): void;

  /**
   * Observer if the popup has been closed befor the data has been received.
   */
  _observePopupState(): void;

  /**
   * Function called in the interval.
   * Observer popup state and calls `_beforePopupUnloadHandler()`
   * when popup is no longer opened.
   */
  _popupObserver(): void;

  /**
   * Browser or server flow: open the initial popup.
   *
   * @param settings Settings passed to the authorize function.
   * @param type `token` or `code`
   * @returns Full URL for the endpoint.
   */
  _constructPopupUrl(settings: object|null, type: String|null): String|null;

  /**
   * Computes `scope` URL parameter from scopes array.
   *
   * @param scopes List of scopes to use with the request.
   * @returns Computed scope value.
   */
  _computeScope(scopes: Array<String|null>|null): String|null;

  /**
   * Listens for a message from the popup.
   */
  _popupMessageHandler(e: Event|null): void;
  _processPopupData(e: any): void;
  _clearIframeTimeout(): void;

  /**
   * http://stackoverflow.com/a/10727155/1127848
   */
  randomString(len: any): any;

  /**
   * Popup is closed by this element so if data is not yet set it means that the
   * user closed the window - probably some error.
   * The UI state is reset if needed.
   */
  _beforePopupUnloadHandler(): void;

  /**
   * Exchange code for token.
   * One note here. This element is intened to use with applications that test endpoints.
   * It asks user to provide `client_secret` parameter and it is not a security concern to him.
   * However, this method **can't be used in regular web applications** because it is a
   * security risk and whole OAuth token exchange can be compromised. Secrets should never be
   * present on client side.
   *
   * @param code Returned code from the authorization endpoint.
   * @returns Promise with token information.
   */
  _exchangeCode(code: String|null): Promise<any>|null;

  /**
   * Returns a body value for the code exchange request.
   *
   * @param settings Initial settings object.
   * @param code Authorization code value returned by the authorization
   * server.
   * @returns Request body.
   */
  _getCodeEchangeBody(settings: object|null, code: String|null): String|null;

  /**
   * Requests for token from the authorization server for `code`, `password`,
   * `client_credentials` and custom grant types.
   *
   * @param url Base URI of the endpoint. Custom properties will be
   * applied to the final URL.
   * @param body Generated body for given type. Custom properties will
   * be applied to the final body.
   * @param settings Settings object passed to the `authorize()` function
   * @returns Promise resolved to the response string.
   */
  _requestToken(url: String|null, body: String|null, settings: object|null): Promise<any>|null;

  /**
   * Handler for the code request load event.
   * Processes the response and either rejects the promise with an error
   * or resolves it to token info object.
   *
   * @param e XHR load event.
   * @param resolve Resolve function
   * @param reject Reject function
   */
  _processTokenResponseHandler(e: Event|null, resolve: Function|null, reject: Function|null): void;

  /**
   * Handler for the code request error event.
   * Rejects the promise with error description.
   *
   * @param e XHR error event
   * @param reject Promise's reject function.
   */
  _processTokenResponseErrorHandler(e: Event|null, reject: Function|null): void;

  /**
   * Processes token request body and produces map of values.
   *
   * @param body Body received in the response.
   * @param contentType Response content type.
   * @returns Response as an object.
   */
  _processCodeResponse(body: String|null, contentType: String|null): object|null;

  /**
   * Processes token info object when it's ready.
   * Sets `tokenInfo` property, notifies listeners about the response
   * and cleans up.
   *
   * @param tokenInfo Token info returned from the server.
   * @returns The same tokenInfo, used for Promise return value.
   */
  _handleTokenInfo(tokenInfo: object|null): object|null;

  /**
   * Handler fore an error that happened during code exchange.
   */
  _handleTokenCodeError(e: Error|null): void;

  /**
   * Replaces `-` or `_` with camel case.
   *
   * @param name The string to process
   * @returns Camel cased string or `undefined` if not
   * transformed.
   */
  _camel(name: String|null): String|null|undefined;

  /**
   * Requests a token for `password` request type.
   *
   * @param settings The same settings as passed to `authorize()`
   * function.
   * @returns Promise resolved to token info.
   */
  authorizePassword(settings: object|null): Promise<any>|null;

  /**
   * Generates a payload message for password authorization.
   *
   * @param settings Settings object passed to the `authorize()`
   * function
   * @returns Message body as defined in OAuth2 spec.
   */
  _getPasswordBody(settings: object|null): String|null;

  /**
   * Requests a token for `client_credentials` request type.
   *
   * @param settings The same settings as passed to `authorize()`
   * function.
   * @returns Promise resolved to a token info object.
   */
  authorizeClientCredentials(settings: object|null): Promise<any>|null;

  /**
   * Generates a payload message for client credentials.
   *
   * @param settings Settings object passed to the `authorize()`
   * function
   * @returns Message body as defined in OAuth2 spec.
   */
  _getClientCredentialsBody(settings: object|null): String|null;

  /**
   * Performs authorization on custom grant type.
   * This extension is described in OAuth 2.0 spec.
   *
   * @param settings Settings object as for `authorize()` function.
   * @returns Promise resolved to a token info object.
   */
  authorizeCustomGrant(settings: object|null): Promise<any>|null;

  /**
   * Creates a body for custom gran type.
   * It does not assume any parameter to be required.
   * It applies all known OAuth 2.0 parameters and then custom parameters
   *
   * @returns Request body.
   */
  _getCustomGrantBody(settings: object|null): String|null;

  /**
   * Applies custom properties defined in the OAuth settings object to the URL.
   *
   * @param url Generated URL for an endpoint.
   * @param data `customData.[type]` property from the settings object.
   * The type is either `auth` or `token`.
   */
  _applyCustomSettingsQuery(url: String|null, data: object|null): String|null;

  /**
   * Applies custom headers from the settings object
   *
   * @param xhr Instance of the request object.
   * @param data Value of settings' `customData` property
   */
  _applyCustomSettingsHeaders(xhr: XMLHttpRequest|null, data: object|null): void;

  /**
   * Applies custom body properties from the settings to the body value.
   *
   * @param body Already computed body for OAuth request. Custom
   * properties are appended at the end of OAuth string.
   * @param data Value of settings' `customData` property
   * @returns Request body
   */
  _applyCustomSettingsBody(body: String|null, data: object|null): String|null;

  /**
   * Dispatches an error event that propagates through the DOM.
   *
   * @param detail The detail object.
   */
  _dispatchError(detail: object|null): void;

  /**
   * Dispatches an event with the authorization code that propagates through the DOM.
   * Closes the popup once the authorization code has been dispatched.
   *
   * @param detail The detail object.
   */
  _dispatchCodeResponse(detail: object|null): void;

  /**
   * Dispatches an event with the token (e.g. access token) that propagates through the DOM.
   *
   * @param detail The detail object.
   */
  _dispatchResponse(detail: object|null): void;

  /**
   * Registers an event handler for given type
   *
   * @param eventType Event type (name)
   * @param value The handler to register
   */
  _registerCallback(eventType: String|null, value: Function|null): void;
}
